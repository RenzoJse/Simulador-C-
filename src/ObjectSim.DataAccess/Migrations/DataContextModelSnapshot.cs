// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectSim.DataAccess;

#nullable disable

namespace ObjectSim.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ObjectSim.DataAccess.DataContext+DataTypeMethodLocalVariables", b =>
                {
                    b.Property<Guid>("IdDataType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdMethod")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdDataType", "IdMethod");

                    b.HasIndex("IdMethod");

                    b.ToTable("DataTypeMethodLocalVariables");
                });

            modelBuilder.Entity("ObjectSim.DataAccess.DataContext+DataTypeMethodParameters", b =>
                {
                    b.Property<Guid>("IdDataType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdMethod")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdDataType", "IdMethod");

                    b.HasIndex("IdMethod");

                    b.ToTable("DataTypeMethodParameters");
                });

            modelBuilder.Entity("ObjectSim.Domain.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInterface")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NamespaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NamespaceId");

                    b.HasIndex("ParentId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsAbstract = false,
                            IsInterface = false,
                            IsSealed = false,
                            Name = "Object"
                        });
                });

            modelBuilder.Entity("ObjectSim.Domain.DataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");

                    b.HasDiscriminator().HasValue("DataType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ObjectSim.Domain.InvokeMethod", b =>
                {
                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvokeMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MethodId", "InvokeMethodId");

                    b.HasIndex("InvokeMethodId");

                    b.ToTable("InvokeMethod");
                });

            modelBuilder.Entity("ObjectSim.Domain.Key", b =>
                {
                    b.Property<Guid>("AccessKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccessKey");

                    b.ToTable("Keys");

                    b.HasData(
                        new
                        {
                            AccessKey = new Guid("9c0ff0b1-4abd-45c6-8a4a-831748fb7a20")
                        },
                        new
                        {
                            AccessKey = new Guid("515dd649-30a0-4d57-9302-62a8db8179bd")
                        });
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Abstract")
                        .HasColumnType("bit");

                    b.Property<int>("Accessibility")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOverride")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TypeId");

                    b.ToTable("Methods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "Equals",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "Equals (Object, Object)",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Abstract = false,
                            Accessibility = 2,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "Finalize",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "GetHashCode",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "GetType",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Abstract = false,
                            Accessibility = 2,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "MemberwiseClone",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "ReferenceEquals",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Abstract = false,
                            Accessibility = 0,
                            ClassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsOverride = false,
                            IsSealed = false,
                            IsVirtual = false,
                            Name = "ToString",
                            TypeId = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("ObjectSim.Domain.Namespace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Namespaces");
                });

            modelBuilder.Entity("ObjectSim.Domain.ReferenceType", b =>
                {
                    b.HasBaseType("ObjectSim.Domain.DataType");

                    b.HasDiscriminator().HasValue("ReferenceType");
                });

            modelBuilder.Entity("ObjectSim.Domain.ValueType", b =>
                {
                    b.HasBaseType("ObjectSim.Domain.DataType");

                    b.HasDiscriminator().HasValue("ValueType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Type = "void"
                        },
                        new
                        {
                            Id = new Guid("249d6656-0276-556c-a992-bcf6bfea8578"),
                            Type = "int"
                        },
                        new
                        {
                            Id = new Guid("729965ef-64e3-5607-939f-8e19784ef0e9"),
                            Type = "bool"
                        },
                        new
                        {
                            Id = new Guid("49e4ea3e-e6d6-4eb7-a7de-01cf4dc1cf7a"),
                            Type = "char"
                        },
                        new
                        {
                            Id = new Guid("1d9cd43c-e19b-4b24-ae0f-fb6cc43f1f27"),
                            Type = "decimal"
                        },
                        new
                        {
                            Id = new Guid("4e82822e-e6e1-44c1-9df9-7c43f7ecda5e"),
                            Type = "byte"
                        },
                        new
                        {
                            Id = new Guid("75dfd62e-8d7c-48ee-9481-183ec3629936"),
                            Type = "float"
                        },
                        new
                        {
                            Id = new Guid("bd8e7c9e-e8d0-42f2-9479-63284c5c3fa0"),
                            Type = "double"
                        });
                });

            modelBuilder.Entity("ObjectSim.DataAccess.DataContext+DataTypeMethodLocalVariables", b =>
                {
                    b.HasOne("ObjectSim.Domain.DataType", null)
                        .WithMany()
                        .HasForeignKey("IdDataType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany()
                        .HasForeignKey("IdMethod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectSim.DataAccess.DataContext+DataTypeMethodParameters", b =>
                {
                    b.HasOne("ObjectSim.Domain.DataType", null)
                        .WithMany()
                        .HasForeignKey("IdDataType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany()
                        .HasForeignKey("IdMethod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectSim.Domain.Attribute", b =>
                {
                    b.HasOne("ObjectSim.Domain.Class", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.HasOne("ObjectSim.Domain.Namespace", null)
                        .WithMany("Classes")
                        .HasForeignKey("NamespaceId");

                    b.HasOne("ObjectSim.Domain.Class", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ObjectSim.Domain.InvokeMethod", b =>
                {
                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany("MethodsInvoke")
                        .HasForeignKey("InvokeMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.HasOne("ObjectSim.Domain.Class", null)
                        .WithMany("Methods")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.DataType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectSim.Domain.Namespace", b =>
                {
                    b.HasOne("ObjectSim.Domain.Namespace", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Methods");
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.Navigation("MethodsInvoke");
                });

            modelBuilder.Entity("ObjectSim.Domain.Namespace", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
