// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectSim.DataAccess;

#nullable disable

namespace ObjectSim.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250428190214_FixedMethodAndAttributeRelationsID")]
    partial class FixedMethodAndAttributeRelationsID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ObjectSim.Domain.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInterface")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ObjectSim.Domain.LocalVariable", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("LocalVariables");
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Abstract")
                        .HasColumnType("bit");

                    b.Property<int>("Accessibility")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOverride")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("MethodId");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("ObjectSim.Domain.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("ObjectSim.Domain.ReferenceType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("ReferenceTypes");
                });

            modelBuilder.Entity("ObjectSim.Domain.ValueType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("ValueTypes");
                });

            modelBuilder.Entity("ObjectSim.Domain.Attribute", b =>
                {
                    b.HasOne("ObjectSim.Domain.Class", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.HasOne("ObjectSim.Domain.Class", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ObjectSim.Domain.LocalVariable", b =>
                {
                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany("LocalVariables")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.HasOne("ObjectSim.Domain.Class", null)
                        .WithMany("Methods")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany("MethodsInvoke")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObjectSim.Domain.Parameter", b =>
                {
                    b.HasOne("ObjectSim.Domain.Method", null)
                        .WithMany("Parameters")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObjectSim.Domain.Class", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Methods");
                });

            modelBuilder.Entity("ObjectSim.Domain.Method", b =>
                {
                    b.Navigation("LocalVariables");

                    b.Navigation("MethodsInvoke");

                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
